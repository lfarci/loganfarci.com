name: "Deploy Next Application"

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  src_directory: ${{ github.workspace }}/src
  out_directory: ${{ github.workspace }}/src/out
  articles_directory: ${{ github.workspace }}/content/articles

jobs:
  deploy:
    name: "Deploy Next Application"
    runs-on: ubuntu-latest
    environment:
      name: Production
    defaults:
      run:
        working-directory: ${{ github.workspace }}/src
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            ${{ env.src_directory }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm clean-install

      - name: Build application
        run: npm run build
        env:
          ARTICLES_DIRECTORY: "${{ env.articles_directory }}"
          NEXT_PUBLIC_GITHUB_REPOSITORY_URL: "${{ github.server_url }}/${{ github.repository }}"
          NEXT_PUBLIC_COMMIT_HASH: "${{ github.sha }}"

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get secrets from Key Vault
        id: get-secrets
        run: |
          echo "deployment_token=$(az keyvault secret show --name StaticWebAppDeploymentKey --vault-name ${{ secrets.AZURE_KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Static Web Apps
        run: |
          npx swa deploy ${{ env.out_directory }} --deployment-token ${{ steps.get-secrets.outputs.deployment_token }} --env production